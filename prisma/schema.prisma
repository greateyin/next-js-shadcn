generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  /// User's unique identifier
  id                    String                 @id @default(cuid())
  /// User name
  name                  String?
  /// User's email address, must be unique
  email                 String                 @unique
  /// Email verification timestamp
  emailVerified         DateTime?
  /// User's avatar URL
  image                 String?
  /// User's phone number
  phoneNumber              String?
  /// User's password
  password              String?
  /// User's status
  status                UserStatus             @default(pending)
  /// Whether two-factor authentication is enabled
  isTwoFactorEnabled    Boolean                @default(false)
  /// Number of login attempts
  loginAttempts         Int                    @default(0)
  /// Last login attempt time
  lastLoginAttempt      DateTime?
  /// Last successful login time
  lastSuccessfulLogin   DateTime?
  /// Login attempts reset time
  loginAttemptsResetAt  DateTime?
  /// User's creation time
  createdAt             DateTime               @default(now())
  /// User's last update time
  updatedAt             DateTime               @updatedAt
  /// Soft delete timestamp (null if not deleted)
  deletedAt             DateTime?
  accounts              Account[]
  auditLogs             AuditLog[]
  loginMethods          LoginMethod[]
  resetTokens           PasswordResetToken[]
  sessions              Session[]
  twoFactorConfirmation TwoFactorConfirmation?
  twoFactorTokens       TwoFactorToken[]
  userRoles             UserRole[]              // User to role associations
  verificationTokens    VerificationToken[]     // Email verification tokens
  notifications         Notification[]          // User notifications
}

model Account {
  /// User identifier
  userId            String
  /// Account type
  type              String
  /// Account provider (e.g., Google, Facebook)
  provider          String
  /// Provider-specific account identifier
  providerAccountId String
  /// Refresh token (optional) - recommended to store encrypted
  refresh_token     String?   @db.Text
  /// Access token - recommended to store encrypted
  access_token      String?   @db.Text
  /// Access token expiration time
  expires_at        Int?
  /// Token type
  token_type        String?
  /// Token scope
  scope             String?
  /// Account's ID token (optional) - recommended to store encrypted
  id_token          String?   @db.Text
  /// Session state
  session_state     String?
  /// Account's creation time
  createdAt         DateTime  @default(now())
  /// Account's last update time - auto-updated
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  /// Session's unique identifier
  id           String   @id @default(cuid())
  /// Session token - used to identify the session
  sessionToken String   @unique
  /// User identifier
  userId       String
  /// Session expiration time
  expires      DateTime
  /// Last activity time - used to track user activity
  lastActivity DateTime @default(now())
  /// User agent - browser or device information
  userAgent    String?
  /// IP address - used for security tracking
  ipAddress    String?
  /// Session creation time
  createdAt    DateTime @default(now())
  /// Session last update time - auto-updated
  updatedAt    DateTime @updatedAt
  /// Device identifier - used for multi-device management
  deviceId     String?
  /// Session type (web, mobile, api)
  sessionType  String   @default("web")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceId])
  @@index([expires])      // Used for periodic cleanup of expired sessions
  @@index([lastActivity]) // Used for activity tracking queries
}

model TwoFactorConfirmation {
  /// Two-factor confirmation's unique identifier
  id        String   @id @default(cuid())
  /// User identifier
  userId    String   @unique
  /// Creation time
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginMethod {
  /// Login method's unique identifier
  id        String   @id @default(cuid())
  /// User identifier
  userId    String
  /// Login method type (e.g., "password", "google", "github")
  method    String
  /// Login method's creation time
  createdAt DateTime @default(now())
  /// Login method's last update time
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, method])  // Prevent duplicate login methods for the same user
  @@index([userId])
}

model VerificationToken {
  /// Verification token's unique identifier
  id      String   @id @default(cuid())
  /// Email address to be verified
  email   String
  /// Verification token value
  token   String   @unique
  /// Token expiration time
  expires DateTime
  /// Associated user ID (optional, used for tracking and cascading deletion)
  userId  String?
  /// Associated user
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
  @@index([userId])   // Used for user-related queries
  @@index([expires])  // Used for periodic cleanup of expired tokens
}

model PasswordResetToken {
  /// Token's unique identifier
  id      String   @id @default(cuid())
  /// Associated email address
  email   String
  /// Reset token value
  token   String   @unique
  /// Token expiration time
  expires DateTime
  /// Associated user ID
  userId  String?
  /// Associated user
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])   // Used for user-related queries
  @@index([expires])  // Used for periodic cleanup of expired tokens
}

model TwoFactorToken {
  /// Two-factor token's unique identifier
  id        String   @id @default(cuid())
  /// User identifier
  userId    String
  /// Two-factor token value
  token     String   @unique
  /// Token expiration time
  expires   DateTime
  /// Whether it has been used - prevents reuse
  used      Boolean  @default(false)
  /// Creation time
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
  @@index([userId])
  @@index([expires])  // Used for periodic cleanup of expired tokens
}

model AuditLog {
  /// Audit log's unique identifier
  id           String   @id @default(cuid())
  /// Related user's identifier (can be null, indicating system operation)
  userId       String?
  /// Audit operation type (e.g., CREATE, UPDATE, DELETE)
  action       String
  /// Operation status (e.g., SUCCESS, FAILED)
  status       String
  /// Operation timestamp
  timestamp    DateTime @default(now())
  /// IP address - used for security tracking
  ipAddress    String?
  /// User agent - browser or device information
  userAgent    String?
  /// Target user identifier (if applicable)
  targetUserId String?
  /// Resource identifier (if applicable)
  resourceId   String?
  /// Resource type (if applicable, e.g., User, Role, Permission)
  resourceType String?
  /// Old value (JSON string, if applicable)
  oldValue     String?  @db.Text
  /// New value (JSON string, if applicable)
  newValue     String?  @db.Text
  /// Operation reason or notes
  reason       String?
  /// Additional metadata (JSON format)
  metadata     Json?
  /// Log priority (low, medium, high, critical)
  priority     String   @default("low")
  /// Related session ID (if applicable)
  sessionId    String?
  /// Associated user (set to null when user is deleted to preserve history)
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([targetUserId])
  @@index([priority])
  @@index([resourceType])           // Used for querying by resource type
  @@index([sessionId])              // Used for tracking session-related logs
  @@index([userId, timestamp])      // Composite index: user's time-series queries
  @@index([action, timestamp])      // Composite index: operation type time-series queries
}

model Role {
  /// Role's unique identifier
  id           String            @id @default(cuid())
  /// Role name
  name         String            @unique
  /// Role description
  description  String?
  /// Creation time
  createdAt    DateTime          @default(now())
  /// Update time
  updatedAt    DateTime          @updatedAt
  /// Soft delete timestamp (null if not deleted)
  deletedAt    DateTime?
  /// Users associated with this role
  users        UserRole[]
  /// Permissions associated with this role
  permissions  RolePermission[]
  /// Applications associated with this role
  applications RoleApplication[]
  /// Menu items associated with this role
  menuItems    MenuItemRole[]
}

model Permission {
  /// Permission's unique identifier
  id          String         @id @default(cuid())
  /// Permission name
  name        String         @unique
  /// Permission description
  description String?
  /// Creation time
  createdAt   DateTime       @default(now())
  /// Update time
  updatedAt   DateTime       @updatedAt
  /// Roles associated with this permission
  roles       RolePermission[]
}

model UserRole {
  /// User-role association's unique identifier
  id        String   @id @default(cuid())
  /// User identifier
  userId    String
  /// Role identifier
  roleId    String
  /// Creation time
  createdAt DateTime @default(now())
  /// Update time
  updatedAt DateTime @updatedAt
  /// Associated user
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// Associated role
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([userId, roleId])  // Composite index: used for permission check queries
}

model RolePermission {
  /// Role-permission association's unique identifier
  id           String     @id @default(cuid())
  /// Role identifier
  roleId       String
  /// Permission identifier
  permissionId String
  /// Creation time
  createdAt    DateTime   @default(now())
  /// Update time
  updatedAt    DateTime   @updatedAt
  /// Associated role
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  /// Associated permission
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@index([roleId, permissionId])  // Composite index: used for permission check queries
}

model Application {
  /// Application's unique identifier
  id          String             @id @default(cuid())
  /// Application name
  name        String             @unique
  /// Application display name
  displayName String
  /// Application description
  description String?
  /// Whether it is active
  isActive    Boolean            @default(true)
  /// Application path
  path        String             @unique
  /// Application icon
  icon        String?
  /// Sort order
  order       Int                @default(0)
  /// Creation time
  createdAt   DateTime           @default(now())
  /// Update time
  updatedAt   DateTime           @updatedAt
  /// Roles associated with this application
  roles       RoleApplication[]
  /// Menu items associated with this application
  menuItems   MenuItem[]
}

model RoleApplication {
  /// Role-application association's unique identifier
  id            String      @id @default(cuid())
  /// Role identifier
  roleId        String
  /// Application identifier
  applicationId String
  /// Creation time
  createdAt     DateTime    @default(now())
  /// Update time
  updatedAt     DateTime    @updatedAt
  /// Associated role
  role          Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  /// Associated application
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([roleId, applicationId])
  @@index([roleId])
  @@index([applicationId])
  @@index([roleId, applicationId])  // Composite index: used for application access checks
}

model MenuItem {
  /// Menu item's unique identifier
  id            String          @id @default(cuid())
  /// Menu item name (internal use)
  name          String
  /// Display name (shown in user interface)
  displayName   String
  /// Menu item description (tooltip text)
  description   String?
  /// Menu item path (URL path)
  path          String
  /// Menu item icon (Lucide icon name, e.g., LayoutDashboard, Users, Settings)
  icon          String?
  /// Menu item type
  type          MenuItemType    @default(LINK)
  /// Parent menu item identifier (for hierarchical menus)
  parentId      String?
  /// Application identifier
  applicationId String
  /// Sort order (sorting within the same level)
  order         Int             @default(0)
  /// Whether it is visible (controls menu item visibility)
  isVisible     Boolean         @default(true)
  /// Whether it is disabled
  isDisabled    Boolean         @default(false)
  /// Menu version (incremented on each update for cache invalidation)
  version       Int             @default(0)
  /// Creation time
  createdAt     DateTime        @default(now())
  /// Update time
  updatedAt     DateTime        @updatedAt
  /// Soft delete timestamp (null if not deleted)
  deletedAt     DateTime?
  /// Associated application
  application   Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  /// Parent menu item
  parent        MenuItem?       @relation("MenuItemToMenuItem", fields: [parentId], references: [id], onDelete: SetNull)
  /// Child menu items list
  children      MenuItem[]      @relation("MenuItemToMenuItem")
  /// Menu item role access permissions
  roleAccess    MenuItemRole[]

  @@unique([applicationId, name])  // Ensure menu name is unique within application
  @@unique([applicationId, path])  // Ensure path is unique within application
  @@index([applicationId])
  @@index([parentId])
  @@index([parentId, order])       // Used for same-level sorting queries
  @@index([isVisible, order])      // Used for querying visible menus with sorting
  @@index([type])                  // Used for filtering by type
}

model MenuItemRole {
  /// Menu item role association's unique identifier
  id         String   @id @default(cuid())
  /// Menu item identifier
  menuItemId String
  /// Role identifier
  roleId     String
  /// Whether it can be viewed (displayed in menu)
  canView    Boolean  @default(true)
  /// Whether it can be accessed (can be clicked to enter)
  canAccess  Boolean  @default(true)
  /// Creation time
  createdAt  DateTime @default(now())
  /// Update time
  updatedAt  DateTime @updatedAt
  /// Associated menu item
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  /// Associated role
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([menuItemId, roleId])     // Ensure menu item and role combination is unique
  @@index([menuItemId])
  @@index([roleId])
  @@index([roleId, canView])         // Used for querying visible menus for a role
  @@index([menuItemId, canView])     // Used for querying visible roles for a menu item
}

/// Menu item type enumeration
enum MenuItemType {
  LINK       // Regular link
  GROUP      // Group title (not clickable)
  DIVIDER    // Divider line
  EXTERNAL   // External link
}

/// Default role enumeration
enum DefaultRole {
  user   // Regular user
  admin  // Administrator
}

/// User status enumeration
enum UserStatus {
  pending   // Pending verification
  active    // Active
  suspended // Suspended
  banned    // Banned
  deleted   // Deleted
  inactive  // Inactive
}

/// Notification type enumeration
enum NotificationType {
  USER_CREATED      // User created
  USER_UPDATED      // User updated
  USER_DELETED      // User deleted
  ROLE_ASSIGNED     // Role assigned to user
  ROLE_REMOVED      // Role removed from user
  PERMISSION_CHANGED // Permission changed
  APPLICATION_CREATED // Application created
  APPLICATION_UPDATED // Application updated
  APPLICATION_DELETED // Application deleted
  MENU_CREATED      // Menu item created
  MENU_UPDATED      // Menu item updated
  MENU_DELETED      // Menu item deleted
  SYSTEM_ALERT      // System alert
  SECURITY_ALERT    // Security alert
  INFO              // General information
}

/// Notification model for system notifications
model Notification {
  /// Notification's unique identifier
  id        String           @id @default(cuid())
  /// User who receives the notification
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// Notification type
  type      NotificationType
  /// Notification title
  title     String
  /// Notification message
  message   String
  /// Additional data (JSON)
  data      Json?
  /// Whether notification has been read
  isRead    Boolean          @default(false)
  /// When notification was read
  readAt    DateTime?
  /// Creation time
  createdAt DateTime         @default(now())
  /// Update time
  updatedAt DateTime         @updatedAt

  @@index([userId])
  @@index([userId, isRead])
  @@index([createdAt])
}
